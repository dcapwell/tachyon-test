(ns tachyon-test.tachyon
  (:require [clojure.test :refer :all]
            [tachyon-test.config :refer [config]])
  (:import [tachyon.client TachyonFS]))

(defn create-filesystem 
  "Creates a new TachyonFS based off the given address"
  [ & {:keys [address] :or {address (config :master-address)}}]
  (TachyonFS/get address))

(defn create-file
  "Attempts to create a file at the given path. If the path already exists or 
  any other exception happens, a string error message is returned"
  [fs path]
  (let [fid (.createFile fs path)]
    (.getFile fs fid)))

(defn is-pred
  "Runs the is function against the given predicate. If fails the message is 
  generated by the m function"
  [f m]
  (fn [a]
    (do
      (is (f a) (m a))
      a)))

(def is-file
  "Adds a check that the given file is a file."
  (is-pred #(.isFile %) #(str "File " % " is not a file")))

(def is-not-file
  "Adds a check that the given file is not a file."
  (is-pred #(not (.isFile %)) #(str "File " % " is a file")))

(def is-dir
  "Adds a check that the given file is a directory."
  (is-pred #(.isDirectory %) #(str "File " % " is not a directory")))

(def is-not-dir
  "Adds a check that the given file is not a directory."
  (is-pred #(not (.isDirectory %)) #(str "File " % " is not a directory")))

(def is-complete
  "Adds a check that the given file is completed."
  (is-pred #(.isComplete %) #(str "File " % " is not completed")))

(def is-not-complete
  "Adds a check that the given file is completed."
  (is-pred #(not (.isComplete %)) #(str "File " % " is completed")))
